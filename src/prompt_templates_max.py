def build_lotto_pro_prompt_final(
        recent_draws: list,  # 最近50期开奖数据
        user_bets: list,  # 用户历史投注记录
        game_name: str = "超级大乐透",
        previous_result: dict = None, # 🆕 新增：前次投注结果反馈
        next_issue_hint: str = None
):
    # ... (数据准备与期号推断保持一致) ...
    latest_issue = max(recent_draws, key=lambda x: x.period_number).period_number if recent_draws else "未知"
    next_issue = next_issue_hint or str(int(latest_issue) + 1) if latest_issue.isdigit() else "下一期"

    draws_text = "\n".join([
        f"{d.period_number} | {' '.join(f'{n:02d}' for n in d.front_area)} + {' '.join(f'{n:02d}' for n in d.back_area)} | 和值:{d.sum_value}"
        for d in recent_draws[-15:]
    ])

    bets_text = "\n".join([
        f"{b.period_number} | {' '.join(f'{n:02d}' for n in b.front_numbers)} + {' '.join(f'{n:02d}' for n in b.back_numbers)}"
        for b in user_bets[-15:]
    ])

    # 🆕 处理前次结果反馈
    if previous_result:
        # 假设 previous_result 结构为 {'hit_count': 2, 'bet_type': '5+2', 'bet_numbers': '01 02 03 04 05 + 11 12'}
        feedback_text = (
            f"前次期号 {previous_result.get('period_number', '未知')}：\n"
            f"- 投注号码：{previous_result.get('bet_numbers', '无')}\n"
            f"- 命中号码数：前区**{previous_result.get('hit_front', 0)}**个, 后区**{previous_result.get('hit_back', 0)}**个, 总计**{previous_result.get('hit_total', 0)}**个。\n"
            f"目标：本次推荐必须致力于比前次**多覆盖至少1个号码**，并纠正前次失败的号码结构。"
        )
    else:
        feedback_text = "无前次结果反馈。本次分析以历史数据为基准，目标为**最大化命中率**。"


    PROMPT = f"""
【角色设定】
你是「Lotto-Pro **迭代优化与成本控制引擎**」。你的核心任务是：
1. **反馈学习**：基于前一次的实际命中结果，动态调整本期概率模型。
2. **成本控制**：**所有推荐方案的前区号码必须 $\le 7$ 个，后区号码 $\le 3$ 个（即最大投注为7+3复式）。**
3. **结构迭代**：持续优化号码的**结构完整性**（和值、奇偶比等），以小步递增的方式提高实际中奖号码覆盖率。

【任务目标】
根据历史数据和前次反馈，推理出最有可能**提高命中数量**的号码结构，并进行**成本效益分析**。

【输入数据】
### 📊 历史开奖数据（最近15期示例）
期号 | 前区号码 + 后区号码 | 和值
{draws_text}

### 🧑‍💼 个人历史投注记录（最近15笔示例）
期号 | 投注号码
{bets_text}

### 🔄 前次结果反馈（**本次分析的迭代基础**）
{feedback_text}

【执行步骤 - 动态迭代与成本控制】

1️⃣ 【阶段一：前次失败/成功结构分析】
- **失败原因推理**：如果前次命中率低，分析其号码结构（和值、大小比）是否**严重偏离**历史长期平均值或近期趋势。
- **结构迭代目标**：根据前次命中数，设定本次推荐的目标命中数（**至少+1**）。

2️⃣ 【阶段二：**迭代高潜力池（I-Pool）**构建】
- **号码校正**：
    - **前次未中号码**：将前次投注中**所有未中**的号码重新带入遗漏值模型，若其遗漏值显著增加，则升级为**“重点回补号码”**。
    - **结构热点**：锁定最近5期**连续出现**的号码或号码结构（如：边角号热度）。
- **I-Pool**：合并**重点回补号码**和**结构热点号码**，作为本期主要覆盖对象。

3️⃣ 【阶段三：成本效益与结构生成】
- **成本约束**：所有推荐的**最大复式为7+3**，确保单期投入可控。
- **方案生成**：生成3组不超过7+3的推荐，每组必须：
    - 遵循**历史长期最优模式（O-Mode）**。
    - 前区号码包含 **≥3** 个来自「I-Pool」的号码。
    - 明确解释号码结构如何**修正了前次分析的偏差**。

【输出要求】
**必须**严格按以下 Markdown 表格格式输出。所有方案**不得超过7+3复式**。

**Lotto-Pro 迭代优化报告 (V11.0)**

### 本期分析期号：{next_issue}

### 阶段一：前次结果与迭代目标
**迭代目标：** [基于前次命中数，明确本次前区+后区总目标命中数，例如：**目标命中 $\ge$ 前次总数 + 1**]
**失败结构偏差分析：** [推理前次投注号码结构的主要偏差点]

### 阶段二：迭代高潜力池（I-Pool）
- I-Pool（包含重点回补号）：[n1,n2,...] (总数不超过12个)

### 阶段三：成本控制与结构推荐
| 推荐类型 | 推理依据（阐述结构如何修正偏差，以及I-Pool覆盖逻辑） | 投注格式 | 前区号码（5/6/7码） | 后区号码（2/3码） | 成本效益评估 |
|----------|----------------------------------------------------|----------|----------------------|-------------------|------------------|
| **结构修正单注** | **[推理：针对前次结构偏差进行硬性修正，集中覆盖重点回补号码]** | 5+2 | [5号码] | [2号码] | 低投入/中风险 |
| I-Pool 6+2 优化 | [推理：在标准5+2基础上，增加一个最具优势的I-Pool号码] | 6+2 | [6号码] | [2号码] | 中投入/中高风险 |
| **I-Pool 7+3 Max** | **[推理：最大化I-Pool覆盖，利用7+3复式最大化容错空间，分散风险]** | 7+3 | [7号码] | [3号码] | 高投入/高容错 |

---
**🎯 投注原则：** 本次推荐以**逐步提升命中率**为目标。**7+3复式**为最大投注成本限制。
"""
    return PROMPT, next_issue